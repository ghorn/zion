# Convert DEMs to raw floating data.
py_binary(
    name = "dem_to_data",
    srcs = ["dem_to_data.py"],
    srcs_version = "PY3",
    python_version = "PY3",
    visibility = ["//visibility:public"],
)

# Convert raw pixel data to a PNG image.
py_binary(
    name = "data_to_png",
    srcs = ["data_to_png.py"],
    srcs_version = "PY3",
    python_version = "PY3",
    visibility = ["//visibility:public"],
)


cxx_opts = [
    "-std=c++17",
    "-Wall",
    "-Wextra",
    "-Werror",
    "-Wconversion",
    "-Wcast-align",
    "-Wdouble-promotion",
    "-Wformat-security",
    "-Winvalid-pch",
    "-Wmissing-format-attribute",
    "-Wnull-dereference",
    "-Wpacked",
    "-Wpointer-arith",
    "-Wredundant-decls",
    "-Wshadow",
    "-Wsign-compare",
    "-Wsign-conversion",
    "-Wswitch-default",
    "-Wswitch-enum",
    "-Wundef",
    "-Wunused",
    "-Wwrite-strings",
    "-Wduplicated-branches",
    "-Wduplicated-cond",
    "-Wlogical-op",
    "-Wmisleading-indentation",
    "-Wunused-but-set-parameter",
    "-Wuseless-cast",
    "-Winit-self",
    "-Wnon-virtual-dtor",
    #"-Wold-style-cast",
    "-Woverloaded-virtual",
    "-fdiagnostics-color=always",
]

c_opts = [
    "-Wall",
    "-Wextra",
    "-Wconversion",
    "-Werror",
    "-std=c11",
    "-Wcast-align",
    "-Wdouble-promotion",
    "-Wformat-security",
    "-Winvalid-pch",
    "-Wmissing-format-attribute",
    "-Wnull-dereference",
    "-Wpacked",
    "-Wpointer-arith",
    "-Wredundant-decls",
    "-Wshadow",
    "-Wsign-compare",
    "-Wsign-conversion",
    "-Wswitch-default",
    "-Wswitch-enum",
    "-Wundef",
    "-Wunused",
    "-Wwrite-strings",
    "-Wduplicated-branches",
    "-Wduplicated-cond",
    "-Wlogical-op",
    "-Wmisleading-indentation",
    "-Wunused-but-set-parameter",
    "-Wfloat-equal",
    "-Wformat=2",
    "-Wformat-nonliteral",
]

cc_library(
    name = "common",
    srcs = [
        "common/hash.hpp",
        "common/heightmap_data.cpp",
        "common/heightmap_data.hpp",
        "common/ply.cpp",
        "common/ply.hpp",
        "common/stl.cpp",
        "common/stl.hpp",
    ],
    copts = cxx_opts,
    visibility = ["//visibility:public"],
)

# convert data blob to PLY mesh
cc_binary(
    name = "hmply",
    srcs = [
        "hmstl/hmply.cpp",
        "hmstl/heightmap.cpp",
        "hmstl/heightmap.hpp",
        "hmstl/parse_args.cpp",
        "hmstl/parse_args.hpp",
    ],
    copts = cxx_opts,
    visibility = ["//visibility:public"],
    deps = [":common"],
)

# Convert PLY to STL.
cc_binary(
    name = "ply2stl",
    srcs = [
        "ply2stl.cpp",
    ],
    copts = cxx_opts,
    visibility = ["//visibility:public"],
    deps = [":common"],
)

# convert data blob to PLY mesh
cc_binary(
    name = "hmm",
    srcs = [
        "hmm/base.cpp",
        "hmm/base.h",
        "hmm/blur.cpp",
        "hmm/blur.h",
        "hmm/cmdline.h",
        "hmm/heightmap.cpp",
        "hmm/heightmap.h",
        "hmm/main.cpp",
        "hmm/triangulator.cpp",
        "hmm/triangulator.h",
    ],
    copts = cxx_opts + [
        "-Wno-float-conversion",
        "-Wno-conversion",
        "-Wno-sign-conversion",
        "-Wno-sign-compare",
        "-Wno-useless-cast",
        "-Wno-shadow",
        "-Wno-comment",
        "-Wno-double-promotion",
    ],
    visibility = ["//visibility:public"],
    deps = [":common"],
)

cc_binary(
    name = "trim_bottom",
    srcs = [
        "finish_mesh/trim_bottom.cpp",
    ],
    copts = cxx_opts,
    visibility = ["//visibility:public"],
    deps = [":common"],
)

cc_binary(
    name = "scale",
    srcs = [
        "finish_mesh/scale.cpp",
    ],
    copts = cxx_opts,
    visibility = ["//visibility:public"],
    deps = [":common"],
)

cc_binary(
    name = "fill_bottom",
    srcs = [
        "finish_mesh/fill_bottom.cpp",
    ],
    copts = cxx_opts + ["-Wno-comment"],
    visibility = ["//visibility:public"],
    deps = [":common", ":earcut"],
)

cc_library(
    name = "earcut",
    hdrs = [
        "finish_mesh/earcut.hpp",
    ],
    includes = ["."],
)


cc_binary(
    name = "roundtrip_ply",
    srcs = [
        "finish_mesh/roundtrip_ply.cpp",
    ],
    copts = cxx_opts,
    visibility = ["//visibility:public"],
    deps = [":common"],
)
