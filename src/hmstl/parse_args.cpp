#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include "parse_args.hpp"

// https://www.gnu.org/software/libc/manual/html_node/Example-of-Getopt.html
// returns 0 if options are parsed successfully; nonzero otherwise
Settings ParseArgs(int32_t argc, char **argv) {
  Settings config = {
    1,    // generate base (walls and bottom)
    NULL, // read from stdin
    -1.0,  // don't specify size
    1.0,  // no x scaling (use raw heightmap values)
    1.0,  // no y scaling (use raw heightmap values)
    1.0,  // no z scaling (use raw heightmap values)
    0.01f  // base thickness fraction
  };

  int32_t c;

  // suppress automatic error messages generated by getopt
  opterr = 0;

  while ((c = getopt(argc, argv, "ax:y:e:z:b:i:m:t:rhs")) != -1) {
    switch (c) {
    case 'x':
      // x scale
      if (sscanf(optarg, "%20f", &config.x_scale) != 1 || config.x_scale <= 0) {
        fprintf(stderr, "X scale must be a number greater than 0.\n");
        exit(1);
      }
      break;
    case 'y':
      // y scale
      if (sscanf(optarg, "%20f", &config.y_scale) != 1 || config.y_scale <= 0) {
        fprintf(stderr, "Y scale must be a number greater than 0.\n");
        exit(1);
      }
      break;
    case 'e':
      // xy size
      if (sscanf(optarg, "%20f", &config.xy_size) != 1 || config.xy_size <= 0) {
        fprintf(stderr, "XY size must be a number greater than 0.\n");
        exit(1);
      }
      break;
    case 'z':
      // Z scale (heightmap value units relative to XY)
      if (sscanf(optarg, "%20f", &config.z_scale) != 1 || config.z_scale <= 0) {
        fprintf(stderr, "Z scale must be a number greater than 0.\n");
        exit(1);
      }
      break;
    case 'b':
      // Base height fraction (default 0.01)
      if (sscanf(optarg, "%20f", &config.baseheight_frac) != 1 || config.baseheight_frac <= 0) {
        fprintf(stderr, "BASEHEIGHT must be a number greater than or equal to 0.\n");
        exit(1);
      }
      break;
    case 'i':
      // Input file (default stdin)
      config.input = optarg;
      break;
    case 's':
      // surface only mode - omit base (walls and bottom)
      config.generate_base = false;
      break;
    case '?':
      // unrecognized option OR missing option argument
      switch (optopt) {
      case 'e':
      case 'x':
      case 'y':
      case 'z':
      case 'b':
      case 'i':
      case 'm':
      case 't':
        fprintf(stderr, "Option -%c requires an argument.\n", optopt);
        break;
      default:
        if (isprint(optopt)) {
          fprintf(stderr, "Unknown option -%c\n", optopt);
        }
        else {
          fprintf(stderr, "Unknown option character \\x%x\n", optopt);
        }
        break;
      }
      exit(1);
      break;
    default:
      // My understand is getopt will return ? for all unrecognized options,
      // so I'm not sure what other cases will be caught here. Perhaps just
      // options specified in optstring that I forget to handle above...
      fprintf(stderr, "Unexpected getopt result: %c\n", optopt);
      exit(1);
      break;
    }
  }

  // should be no parameters left
  if (optind < argc) {
    fprintf(stderr, "Extraneous arguments\n");
    exit(1);
  }

  if (config.input == NULL) {
    fprintf(stderr, "No input path set. Use -i to set input path.\n");
    std::exit(1);
  }

  return config;
}
