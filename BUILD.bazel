load("//:dem_names.bzl", "dem_names")
load("@rules_python//python:defs.bzl", "py_binary")

# Downlaod all the DEM zip files.
[
    genrule(
        name = "dem_zip_{}".format(dem_name),
        srcs = [],
        outs = ["{}.zip".format(dem_name)],
        cmd = """
wget -q --directory-prefix=$(@D) https://storage.googleapis.com/state-of-utah-sgid-downloads/lidar/zion-np-2016/QL2/DEMs/{}.zip
""".format(dem_name),
    )
    for dem_name in dem_names()
]

# Unzip all the DEMs.
[
    genrule(
        name = "dem_img_{}".format(dem_name),
        srcs = [":dem_zip_{}".format(dem_name)],
        outs = [
            "{}.img".format(dem_name),
            "{}.img.aux.xml".format(dem_name),
            "{}.img.xml".format(dem_name),
        ],
        cmd = """
unzip -q $< -d $(@D)
""".format(dem_name),
    )
    for dem_name in dem_names()
]

# Convert DEMs to raw pixel data.
py_binary(
    name = "dems_to_pixel_data",
    srcs = ["dems_to_pixel_data.py"],
    srcs_version = "PY3",
    python_version = "PY3",
)

genrule(
    name = "pixel_data",
    tools = [":dems_to_pixel_data"],
    outs = ["pixel_data.dat"],
    srcs = [":{}.img".format(dem_name) for dem_name in dem_names()],
    cmd = """
$(location :dems_to_pixel_data) {} --output $@
    """.format(",".join(["$(location {}.img)".format(dem_name) for dem_name in dem_names()])),
)

# turn pixel data into binary blob of floats
# Convert raw pixel data to a PNG image.
py_binary(
    name = "pixel_data_to_png",
    srcs = ["pixel_data_to_png.py"],
    srcs_version = "PY3",
    python_version = "PY3",
)

genrule(
    name = "png",
    tools = [":pixel_data_to_png"],
    outs = ["height_map.png"],
    srcs = [":pixel_data.dat"],
    cmd ="""
$(location :pixel_data_to_png) $< $@ --downsample 20
du -hs $(location :height_map.png)
""",
)

# turn pixel data into binary blob of floats
# Convert raw pixel data to a PNG image.
py_binary(
    name = "pixel_data_to_floating_blob",
    srcs = ["pixel_data_to_floating_blob.py"],
    srcs_version = "PY3",
    python_version = "PY3",
)

genrule(
    name = "floating_blob",
    tools = [":pixel_data_to_floating_blob"],
    outs = ["floating_blob.dat"],
    srcs = [":pixel_data.dat"],
    cmd ="""
$(location :pixel_data_to_floating_blob) $< $@ --downsample 5
du -hs $(location :floating_blob.dat)
""",
)

cxx_opts = [
    "-std=c++17",
    "-Wall",
    "-Wextra",
    "-Werror",
    "-Wconversion",
    "-Wcast-align",
    "-Wdouble-promotion",
    "-Wformat-security",
    "-Winvalid-pch",
    "-Wmissing-format-attribute",
    "-Wnull-dereference",
    "-Wpacked",
    "-Wpointer-arith",
    "-Wredundant-decls",
    "-Wshadow",
    "-Wsign-compare",
    "-Wsign-conversion",
    "-Wswitch-default",
    "-Wswitch-enum",
    "-Wundef",
    "-Wunused",
    "-Wwrite-strings",
    "-Wduplicated-branches",
    "-Wduplicated-cond",
    "-Wlogical-op",
    "-Wmisleading-indentation",
    "-Wunused-but-set-parameter",
    "-Wuseless-cast",
    "-Winit-self",
    "-Wnon-virtual-dtor",
    #"-Wold-style-cast",
    "-Woverloaded-virtual",
]

c_opts = [
    "-Wall",
    "-Wextra",
    "-Wconversion",
    "-Werror",
    "-std=c11",
    "-Wcast-align",
    "-Wdouble-promotion",
    "-Wformat-security",
    "-Winvalid-pch",
    "-Wmissing-format-attribute",
    "-Wnull-dereference",
    "-Wpacked",
    "-Wpointer-arith",
    "-Wredundant-decls",
    "-Wshadow",
    "-Wsign-compare",
    "-Wsign-conversion",
    "-Wswitch-default",
    "-Wswitch-enum",
    "-Wundef",
    "-Wunused",
    "-Wwrite-strings",
    "-Wduplicated-branches",
    "-Wduplicated-cond",
    "-Wlogical-op",
    "-Wmisleading-indentation",
    "-Wunused-but-set-parameter",
    "-Wfloat-equal",
    "-Wformat=2",
    "-Wformat-nonliteral",
]

cc_binary(
    name = "hmstl",
    srcs = [
        "hmstl.cpp",
        "heightmap.cpp",
        "heightmap.hpp",
    ],
    copts = cxx_opts,
    deps = [":libtrix"],
)

cc_library(
    name = "libtrix",
    srcs = [
        "libtrix.c",
        "libtrix.h",
    ],
    copts = c_opts,
)

# Turn the PNG image into an stl with hmstl.
genrule(
    name="stl",
    tools = [":hmstl"],
    srcs = [":floating_blob.dat"],
    outs = ["height_map.stl"],
    cmd = """
$(location :hmstl) -i $(location :floating_blob.dat) -o $@
du -hs $@
""",
)
