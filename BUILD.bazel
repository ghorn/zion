load("//dems:dem_names.bzl", "dem_names")

#genrule(
#    name = "meshlab_server",
#    outs = ["MeshLabServer2020.09-linux.AppImage"],
#    cmd = """
#wget -q --directory-prefix=$(@D) https://github.com/cnr-isti-vclab/meshlab/releases/download/Meshlab-2020.09/MeshLabServer2020.09-linux.AppImage
#"""
#)

genrule(
    name = "pixel_data",
    tools = ["//src:dems_to_pixel_data"],
    outs = ["pixel_data.dat"],
    srcs = ["//dems:{}.img".format(dem_name) for dem_name in dem_names()],
    cmd = """
$(location //src:dems_to_pixel_data) {} --output $@
    """.format(",".join(["$(location //dems:{}.img)".format(dem_name) for dem_name in dem_names()])),
)

genrule(
    name = "png",
    tools = ["//src:pixel_data_to_png"],
    outs = ["height_map.png"],
    srcs = [":pixel_data.dat"],
    cmd ="""
$(location //src:pixel_data_to_png) $< $@ --target_dimension 1000
du -hs $@
""",
)

decimation = 40

genrule(
    name = "floating_blob",
    tools = ["//src:pixel_data_to_floating_blob"],
    srcs = [":pixel_data.dat"],
    outs = ["floating_blob_decim{}.dat".format(decimation)],
    cmd ="""
$(location //src:pixel_data_to_floating_blob) $< $@ --decimation {}
du -hs $@
""".format(decimation),
)

# Turn the blob into a ply with hmply.
genrule(
    name="ply",
    tools = ["//src:hmply"],
    srcs = [":floating_blob_decim{}.dat".format(decimation)],
    outs = ["height_map_decim{}.ply".format(decimation)],
    cmd = """
time $(location //src:hmply) -i $< -o $@
du -hs $@
""".format(decimation),
)
